{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./jssrc/csdn.ts"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,+CAA+C,mDAAmD;AAClG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,qBAAqB,EAAE;AACtF;AACA,uCAAuC,+CAA+C;AACtF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,wCAAwC;AACxC;AACA,gDAAgD;AAChD,sCAAsC;AACtC,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","file":"csdn.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./jssrc/csdn.ts\");\n","/*\r\n * @Description: In User Settings Edit\r\n * @Author: your name\r\n * @Date: 2019-10-08 15:41:39\r\n * @LastEditTime: 2019-10-09 14:03:14\r\n * @LastEditors: Please set LastEditors\r\n */\r\n(function () {\r\n    var d = document, w = window, p = parseInt, dd = d.documentElement, db = d.body, dc = d.compatMode == 'CSS1Compat', dx = dc ? dd : db, ec = encodeURIComponent;\r\n    w.CHAT = {\r\n        msgObj: d.getElementById(\"message\"),\r\n        screenheight: w.innerHeight ? w.innerHeight : dx.clientHeight,\r\n        username: null,\r\n        userid: null,\r\n        socket: null,\r\n        //让浏览器滚动条保持在最低部\r\n        scrollToBottom: function () {\r\n            w.scrollTo(0, this.msgObj.clientHeight);\r\n        },\r\n        //退出，本例只是一个简单的刷新\r\n        logout: function () {\r\n            //this.socket.disconnect();\r\n            location.reload();\r\n        },\r\n        //提交聊天消息内容\r\n        submit: function () {\r\n            var content = (d.getElementById(\"content\")).value;\r\n            if (content != '') {\r\n                var obj = {\r\n                    userid: this.userid,\r\n                    username: this.username,\r\n                    content: content\r\n                    // content: 'dangeceshi'\r\n                };\r\n                this.socket.emit('message', obj);\r\n                // this.socket.emit('singlemessage', obj);\r\n                (d.getElementById(\"content\")).value = '';\r\n            }\r\n            return false;\r\n        },\r\n        genUid: function () {\r\n            return new Date().getTime() + \"\" + Math.floor(Math.random() * 899 + 100);\r\n        },\r\n        //更新系统消息，本例中在用户加入、退出的时候调用\r\n        updateSysMsg: function (o, action) {\r\n            console.log(o);\r\n            //当前在线用户列表\r\n            var onlineUsers = o.onlineUsers;\r\n            //当前在线人数\r\n            var onlineCount = o.onlineCount;\r\n            //新加入用户的信息\r\n            var user = o.user;\r\n            //更新在线人数\r\n            var userhtml = '';\r\n            var separator = '';\r\n            for (var key in onlineUsers) {\r\n                if (onlineUsers.hasOwnProperty(key)) {\r\n                    // userhtml += separator + onlineUsers[key];\r\n                    // separator = '、';\r\n                    //两个参数：目标id、当前的userName\r\n                    // userhtml += separator + '<span onclick=\"CHAT.chatsingle('+ key + ',' + this.username +')\" >' + onlineUsers[key] +'</span>';\r\n                    userhtml += separator + \"<span onclick=\\\"CHAT.chatsingle('\" + key + \"','\" + this.username + \"')\\\" >\" + onlineUsers[key] + \"</span>\";\r\n                    separator = '、';\r\n                }\r\n            }\r\n            d.getElementById(\"onlinecount\").innerHTML = '当前共有 ' + onlineCount + ' 人在线，在线列表：' + userhtml;\r\n            //添加系统消息\r\n            var html = '';\r\n            html += '<div class=\"msg-system\">';\r\n            html += user.username;\r\n            html += (action == 'login') ? ' 加入了聊天室' : ' 退出了聊天室';\r\n            html += '</div>';\r\n            var section = d.createElement('section');\r\n            section.className = 'system J-mjrlinkWrap J-cutMsg';\r\n            section.innerHTML = html;\r\n            this.msgObj.appendChild(section);\r\n            this.scrollToBottom();\r\n        },\r\n        //和单个人通信\r\n        chatsingle: function (userid, curname) {\r\n            this.socket.emit('singlemessage', { userid: userid, username: curname, msg: '单个消息测试' });\r\n        },\r\n        //第一个界面用户提交用户名\r\n        usernameSubmit: function () {\r\n            var username = (d.getElementById(\"username\")).value;\r\n            if (username != \"\") {\r\n                (d.getElementById(\"username\")).value = '';\r\n                d.getElementById(\"loginbox\").style.display = 'none';\r\n                d.getElementById(\"chatbox\").style.display = 'block';\r\n                this.init(username);\r\n            }\r\n            return false;\r\n        },\r\n        init: function (username) {\r\n            /*\r\n            客户端根据时间和随机数生成uid,这样使得聊天室用户名称可以重复。\r\n            实际项目中，如果是需要用户登录，那么直接采用用户的uid来做标识就可以\r\n            */\r\n            this.userid = this.genUid();\r\n            this.username = username;\r\n            d.getElementById(\"showusername\").innerHTML = this.username;\r\n            this.scrollToBottom();\r\n            //连接websocket后端服务器\r\n            this.socket = io.connect('ws://127.0.0.1:47866/', { path: \"/sbkk/csdn\" }); //这里是个巨坑\r\n            //告诉服务器端有用户登录\r\n            this.socket.emit('login', { userid: this.userid, username: this.username });\r\n            //监听新用户登录\r\n            this.socket.on('login', function (o) {\r\n                CHAT.updateSysMsg(o, 'login');\r\n            });\r\n            //监听用户退出\r\n            this.socket.on('logout', function (o) {\r\n                CHAT.updateSysMsg(o, 'logout');\r\n            });\r\n            //监听消息发送\r\n            this.socket.on('message', function (obj) {\r\n                var isme = (obj.userid == CHAT.userid) ? true : false;\r\n                var contentDiv = '<div>' + obj.content + '</div>';\r\n                var usernameDiv = '<span>' + obj.username + '</span>';\r\n                var section = d.createElement('section');\r\n                if (isme) {\r\n                    section.className = 'user';\r\n                    section.innerHTML = contentDiv + usernameDiv;\r\n                }\r\n                else {\r\n                    section.className = 'service';\r\n                    section.innerHTML = usernameDiv + contentDiv;\r\n                }\r\n                CHAT.msgObj.appendChild(section);\r\n                CHAT.scrollToBottom();\r\n            });\r\n            var curname = this.username; //当前用户ming\r\n            this.socket.on('singlemessage', function (obj) {\r\n                if (obj.userid == CHAT.userid) { //判断目标id是否和当前id一致\r\n                    //this.id是当前用户的id;obj.userid是目标id\r\n                    var isme = (obj.username == curname) ? true : false; //判断是否是自己的窗口\r\n                    var contentDiv = '<div>' + obj.msg + '</div>';\r\n                    var usernameDiv = '<span>' + obj.username + '</span>';\r\n                    var section = d.createElement('section');\r\n                    if (isme) {\r\n                        section.className = 'user';\r\n                        section.innerHTML = contentDiv + usernameDiv;\r\n                    }\r\n                    else {\r\n                        section.className = 'service';\r\n                        section.innerHTML = usernameDiv + contentDiv;\r\n                    }\r\n                    CHAT.msgObj.appendChild(section);\r\n                    CHAT.scrollToBottom();\r\n                }\r\n            });\r\n        }\r\n    };\r\n    //通过“回车”提交用户名\r\n    (d.getElementById(\"username\")).onkeydown = function (e) {\r\n        e = e || event;\r\n        if (e.keyCode === 13) {\r\n            CHAT.usernameSubmit();\r\n        }\r\n    };\r\n    //通过“回车”提交信息\r\n    d.getElementById(\"content\").onkeydown = function (e) {\r\n        e = e || event;\r\n        if (e.keyCode === 13) {\r\n            CHAT.submit();\r\n        }\r\n    };\r\n})();\r\n"],"sourceRoot":""}